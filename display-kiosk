#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = "Niklas Fiekas"
__copyright__ = "Copyright 2013, Niklas Fiekas"
__license__ = "GPL"
__version__ = "0.0.5"
__maintainer__ = "Niklas Fiekas"
__email__ = "niklas.fiekas@tu-clausthal.de"
__status__ = "Development"


import sys
import getpass

from PySide.QtCore import *
from PySide.QtGui import *
from PySide.QtWebKit import *
from PySide.QtNetwork import *


class Kiosk(QWidget):
    def __init__(self, settings):
        super(Kiosk, self).__init__()
        self.initUnlockBar()
        self.initLayout()
        self.initKiosk()

    def initLayout(self):
        layout = QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        self.setLayout(layout)

        layout.addWidget(self.unlockBar, 0)

        self.view = QWebView()
        layout.addWidget(self.view, 1)

    def initUnlockBar(self):
        unlockBarLayout = QHBoxLayout()

        self.cancelButton = QPushButton("Cancel")
        self.cancelButton.clicked.connect(self.onCancelButtonClicked)
        unlockBarLayout.addWidget(self.cancelButton)

        unlockLabel = QLabel("Unlock to close: ")
        unlockLabel.setAlignment(Qt.AlignRight | Qt.AlignVCenter)
        unlockBarLayout.addWidget(unlockLabel, 1)

        self.passwordBox = QLineEdit()
        self.passwordBox.setEchoMode(QLineEdit.Password)
        self.passwordBox.installEventFilter(self)
        unlockBarLayout.addWidget(self.passwordBox)

        try:
            import PAM
        except:
            self.passwordBox.setEnabled(False)

        self.settingsButton = QPushButton("Settings")
        self.settingsButton.clicked.connect(self.onSettingsButtonClicked)
        unlockBarLayout.addWidget(self.settingsButton)

        self.closeButton = QPushButton("Close")
        self.closeButton.setDefault(True)
        self.closeButton.clicked.connect(self.onCloseButtonClicked)
        unlockBarLayout.addWidget(self.closeButton)

        self.unlockBar = QWidget()
        self.unlockBar.setVisible(False)
        self.unlockBar.setLayout(unlockBarLayout)

    def initKiosk(self):
        self.settings = settings

        self.scrollTimer = QTimer()
        self.scrollTimer.timeout.connect(self.onScrollTimeout)

        self.reloadTimer = QTimer()
        self.reloadTimer.timeout.connect(self.onReloadTimeout)

        self.reconfigure()

    def reconfigure(self):
        if self.settings.value("FullScreen") == "true":
            self.showFullScreen()
        else:
            self.showNormal()

        if self.settings.value("HideCursor") == "true":
            QApplication.setOverrideCursor(Qt.BlankCursor)
        else:
            QApplication.setOverrideCursor(Qt.ArrowCursor)

        if self.settings.value("AutoScroll") == "true":
            self.scrollTimer.start(int(self.settings.value("AutoScrollInterval")))
        else:
            self.scrollTimer.stop()

        if self.settings.value("AutoReload") == "true":
            self.reloadTimer.start(int(self.settings.value("AutoReloadInterval")))
        else:
            self.reloadTimer.stop()

        proxy = QNetworkProxyFactory.systemProxyForQuery(QNetworkProxyQuery(QUrl(self.settings.value("Url"))))
        if proxy:
            QNetworkProxy.setApplicationProxy(proxy[0])
        self.reloadPage()

    def reloadPage(self):
        self.view.load(QUrl(self.settings.value("Url")))

    def onScrollTimeout(self):
        delta = int(self.settings.value("AutoScrollDelta"))
        frame = self.view.page().mainFrame()
        if frame.scrollBarValue(Qt.Vertical) >= frame.scrollBarMaximum(Qt.Vertical):
            self.reloadPage()
        else:
            frame.setScrollBarValue(Qt.Vertical, frame.scrollBarValue(Qt.Vertical) + delta)

    def onReloadTimeout(self):
        self.reloadPage()

    def onCancelButtonClicked(self):
        self.hideUnlockBar()

    def onSettingsButtonClicked(self):
        if self.checkPassword():
            settingsDialog = SettingsDialog(self.settings, self)
            if settingsDialog.exec_():
                self.reconfigure()

            self.hideUnlockBar()

    def onCloseButtonClicked(self):
        if self.checkPassword():
            self.hide()
            self.close()

    def showUnlockBar(self):
        QApplication.setOverrideCursor(Qt.ArrowCursor)
        self.unlockBar.setVisible(True)
        self.passwordBox.setFocus()

    def hideUnlockBar(self):
        self.unlockBar.setVisible(False)
        self.passwordBox.setText("")

        if self.settings.value("HideCursor") == "true":
            QApplication.setOverrideCursor(Qt.BlankCursor)
        else:
            QApplication.setOverrideCursor(Qt.ArrowCursor)

    def closeEvent(self, event):
        if self.isVisible():
            self.showUnlockBar()
            event.ignore()
        else:
            event.accept()

    def checkPassword(self):
        try:
            import PAM
        except:
            return True

        self.settingsButton.setEnabled(False)
        self.cancelButton.setEnabled(False)
        self.closeButton.setEnabled(False)
        self.passwordBox.setEnabled(False)

        # Immediately make the buttons appear disabled.
        while QApplication.hasPendingEvents():
            QApplication.processEvents()

        try:
            import PAM
            auth = PAM.pam()
            auth.start("passwd")
            auth.set_item(PAM.PAM_CONV, self.pamConv)

            auth.authenticate()
            auth.acct_mgmt()
            return True
        except PAM.error:
            self.passwordBox.setEnabled(True)
            self.passwordBox.selectAll()
            self.passwordBox.setFocus()
            return False
        finally:
            self.settingsButton.setEnabled(True)
            self.cancelButton.setEnabled(True)
            self.closeButton.setEnabled(True)
            self.passwordBox.setEnabled(True)

    def pamConv(self, auth, queryList, userData):
        import PAM

        resp = []

        for i in range(len(queryList)):
            query, mode = queryList[i]
            if mode == PAM.PAM_PROMPT_ECHO_ON:
                resp.append((getpass.getuser(), 0))
            elif mode == PAM.PAM_PROMPT_ECHO_OFF:
                resp.append((self.passwordBox.text(), 0))
            elif mode == PAM.PAM_PROMPT_ERROR_MSG or mode == PAM.PAM_PROMPT_TEXT_INFO:
                resp.append(("", 0))
            else:
                return None

        return resp

    def eventFilter(self, obj, event):
        if obj == self.passwordBox:
            if event.type() == QEvent.KeyPress:
                if event.key() == Qt.Key_Escape:
                    self.hideUnlockBar()
                elif event.key() == Qt.Key_Return:
                    self.onCloseButtonClicked()
        return super(Kiosk, self).eventFilter(obj, event)


class SettingsDialog(QDialog):
    def __init__(self, settings, parent=None):
        super(SettingsDialog, self).__init__(parent)
        self.settings = settings

        layout = QVBoxLayout()

        box = QHBoxLayout()
        box.addWidget(QLabel("URL:"))
        self.urlBox = QLineEdit()
        box.addWidget(self.urlBox)
        layout.addLayout(box)

        self.fullScreenBox = QCheckBox("Use full screen mode\n(exit with ALT+F4 for most window managers)")
        layout.addWidget(self.fullScreenBox)

        self.hideCursorBox = QCheckBox("Hide cursor")
        layout.addWidget(self.hideCursorBox)

        box = QHBoxLayout()
        self.autoScrollBox = QCheckBox("Automatically scroll\n(and reload when reaching the end)")
        self.autoScrollBox.stateChanged.connect(self.onAutoScrollStateChanged)
        box.addWidget(self.autoScrollBox)
        self.autoScrollDeltaBox = QSpinBox()
        self.autoScrollDeltaBox.setMinimum(0)
        self.autoScrollDeltaBox.setMaximum(100000)
        self.autoScrollDeltaBox.setSuffix("px")
        box.addWidget(self.autoScrollDeltaBox)
        box.addWidget(QLabel("every"))
        self.autoScrollIntervalBox = QSpinBox()
        self.autoScrollIntervalBox.setMinimum(10)
        self.autoScrollIntervalBox.setMaximum(604800000)
        self.autoScrollIntervalBox.setSuffix("ms")
        box.addWidget(self.autoScrollIntervalBox)
        box.addWidget(QWidget(), 1)
        layout.addLayout(box)

        box = QHBoxLayout()
        self.autoReloadBox = QCheckBox("Reload every")
        self.autoReloadBox.stateChanged.connect(self.onAutoReloadStateChanged)
        box.addWidget(self.autoReloadBox)
        self.autoReloadIntervalBox = QSpinBox()
        self.autoReloadIntervalBox.setMinimum(10)
        self.autoReloadIntervalBox.setMaximum(604800000)
        self.autoReloadIntervalBox.setSuffix("ms")
        box.addWidget(self.autoReloadIntervalBox)
        box.addWidget(QWidget(), 1)
        layout.addLayout(box)

        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.rejected.connect(self.reject)
        buttons.accepted.connect(self.onAccepted)
        layout.addWidget(buttons)

        self.setLayout(layout)
        self.setWindowTitle("Display kiosk settings")
        self.reset()

    def reset(self):
        self.urlBox.setText(self.settings.value("Url", "http://"))
        self.fullScreenBox.setCheckState(Qt.Checked if self.settings.value("FullScreen", "true") == "true" else Qt.Unchecked)
        self.hideCursorBox.setCheckState(Qt.Checked if self.settings.value("HideCursor", "false") == "true" else Qt.Unchecked)
        self.autoScrollBox.setCheckState(Qt.Checked if self.settings.value("AutoScroll", "false") == "true" else Qt.Unchecked)
        self.autoScrollDeltaBox.setValue(int(self.settings.value("AutoScrollDelta", 300)))
        self.autoScrollIntervalBox.setValue(int(self.settings.value("AutoScrollInterval", 5000)))
        self.autoReloadBox.setCheckState(Qt.Checked if self.settings.value("AutoReload", "false") == "true" else Qt.Unchecked)
        self.autoReloadIntervalBox.setValue(int(self.settings.value("AutoReloadInterval", 60000)))

        self.onAutoScrollStateChanged(self.autoScrollBox.checkState())
        self.onAutoReloadStateChanged(self.autoReloadBox.checkState())

    def onAccepted(self):
        url = QUrl.fromUserInput(self.urlBox.text())
        if not url.isValid():
            QMessageBox.warning(self, self.windowTitle(), "The given URL is invalid.")
            self.urlBox.selectAll()
            return

        self.settings.setValue("Url", url.toString())
        self.settings.setValue("FullScreen", "true" if self.fullScreenBox.isChecked() else "false")
        self.settings.setValue("HideCursor", "true" if self.hideCursorBox.isChecked() else "false")
        self.settings.setValue("AutoScroll", "true" if self.autoScrollBox.isChecked() else "false")
        self.settings.setValue("AutoScrollDelta", self.autoScrollDeltaBox.value())
        self.settings.setValue("AutoScrollInterval", self.autoScrollIntervalBox.value())
        self.settings.setValue("AutoReload", "true" if self.autoReloadBox.isChecked() else "false")
        self.settings.setValue("AutoReloadInterval", self.autoReloadIntervalBox.value())
        self.accept()

    def onAutoScrollStateChanged(self, state):
        self.autoScrollDeltaBox.setEnabled(state == Qt.Checked)
        self.autoScrollIntervalBox.setEnabled(state == Qt.Checked)

    def onAutoReloadStateChanged(self, state):
        self.autoReloadIntervalBox.setEnabled(state == Qt.Checked)


if __name__ == "__main__":
    app = QApplication(sys.argv)

    settings = QSettings(QSettings.IniFormat, QSettings.UserScope, "display-kiosk", "display-kiosk")
    if settings.value("Url") or SettingsDialog(settings).exec_():

        kiosk = Kiosk(settings)

        sys.exit(app.exec_())
